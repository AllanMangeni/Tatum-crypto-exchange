'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const debug = require('debug')('thor:http-provider');
const eventemitter3_1 = require("eventemitter3");
const WebSocket = require("isomorphic-ws");
const QS = require("querystring");
const json_rpc_1 = require("./json-rpc");
const rpc_methods_1 = require("./rpc-methods");
class ThorProvider extends eventemitter3_1.EventEmitter {
    constructor(host, timeout = 0) {
        super();
        if (!host) {
            throw new Error('[thor-provider]Thorify requires that the host be specified(e.g. "http://localhost:8669")');
        }
        const hostURL = url_1.parse(host);
        if (!hostURL.protocol || !hostURL.host) {
            throw new Error('[thor-provider]Parsing url failed!');
        }
        this.RESTHost = `${hostURL.protocol}//${hostURL.host}`;
        this.WSHost = `${hostURL.protocol.replace('http', 'ws')}//${hostURL.host}`;
        this.timeout = timeout;
        this.sockets = [];
    }
    sendAsync(payload, callback) {
        debug('payload: %O', payload);
        const rpc = new json_rpc_1.JSONRPC(payload);
        // kindly remind developers about the usage about send transaction
        if (rpc.method === 'eth_sendTransaction') {
            return callback(null, rpc.makeError('[thor-provider]The private key corresponding to from filed can\'t be found in local eth.accounts.wallet!'));
        }
        // subscriptions
        if (rpc.method === 'eth_subscribe' || rpc.method === 'eth_unsubscribe') {
            return this.ManagerSubscription(rpc, callback);
        }
        if (rpc_methods_1.RPCMethodMap.has(rpc.method)) {
            const executor = rpc_methods_1.RPCMethodMap.get(rpc.method);
            executor(rpc, this.RESTHost, this.timeout).then((ret) => {
                debug('response: %O', ret.result);
                omitCallBackedPromise(callback(null, ret));
                return;
            }).catch((err) => {
                omitCallBackedPromise(callback(err, null));
                return;
            });
        }
        else {
            callback(null, rpc.makeError('[thor-provider]Method not supported!'));
            return;
        }
    }
    ManagerSubscription(rpc, callback) {
        let query = '';
        if (rpc.method === 'eth_subscribe') {
            let URI = '/subscriptions/';
            switch (rpc.params[0]) {
                case 'newHeads':
                    URI += 'block';
                    if (rpc.params[1] && rpc.params[1] !== 'best') {
                        URI += '?pos=' + rpc.params[1];
                    }
                    break;
                case 'logs':
                    URI += 'event';
                    if (typeof rpc.params[1] === 'object' && rpc.params[1] !== null) {
                        let options = {};
                        for (let [key, value] of Object.entries(rpc.params[1])) {
                            if (key === 'address') {
                                options['addr'] = value;
                            }
                            else {
                                options[key] = value;
                            }
                        }
                        query = QS.stringify(options);
                        if (query) {
                            URI += '?' + query;
                        }
                    }
                    break;
                case 'transfers':
                    URI += 'transfer';
                    query = QS.stringify(rpc.params[1]);
                    if (query) {
                        URI += '?' + query;
                    }
                    break;
                default:
                    callback(null, rpc.makeError(`Subscription ${rpc.params[0]} not supported!`));
                    return;
            }
            /*  web3-core-requestmanager doesn't respond to error event, so in thorify both "data" level and "error" level are emitted
                by "data" event and will add subscriptionHandler to handle the message, regarding the process in request manager, the
                format of data emitted is not the standard JSON-RPC format, so built to func makeSubResult and makeSubError to work with that
            */
            const ws = new WebSocket(this.WSHost + URI);
            ws.onerror = (event) => {
                debug('error from ws: %O', event);
                this.emit('data', rpc.makeSubError(event.error ? event.error : 'Error from upstream'));
            };
            ws.onmessage = (event) => {
                debug('[ws]message from ws: %O', event.data);
                try {
                    // wrong type define of message, typeof message turns to be string
                    const obj = JSON.parse(event.data);
                    obj.removed = obj.obsolete;
                    delete obj.obsolete;
                    this.emit('data', rpc.makeSubResult(obj));
                }
                catch (e) {
                    debug('Parse message failed %O', e);
                }
            };
            ws.onopen = () => {
                debug('[ws]opened');
                ws.onclose = (event) => {
                    debug('[ws]close', event.code, event.reason);
                    let errMsg = 'Connection closed.';
                    if (event.code) {
                        errMsg += ' Error code: ' + event.code;
                    }
                    if (event.reason) {
                        errMsg += ' Error reason: ' + event.reason;
                    }
                    this.emit('data', rpc.makeSubError(new Error(errMsg)));
                };
            };
            this.sockets[rpc.id] = { rpc, ws };
            callback(null, rpc.makeResult(rpc.id));
            return;
        }
        else {
            if (this.sockets[rpc.params[0]]) {
                const ws = this.sockets[rpc.params[0]].ws;
                if (ws && ws.readyState === ws.OPEN) {
                    ws.close();
                    // clean up
                    if (ws.removeAllListeners) {
                        ws.removeAllListeners();
                    }
                    else {
                        ws.onopen = null;
                        ws.onerror = null;
                        ws.onmessage = null;
                        ws.onclose = null;
                    }
                    delete this.sockets[rpc.params[0]];
                    callback(null, rpc.makeResult(true));
                }
                else {
                    delete this.sockets[rpc.params[0]];
                    callback(null, rpc.makeResult(true));
                }
            }
            else {
                callback(null, rpc.makeResult(true));
            }
        }
    }
}
exports.ThorProvider = ThorProvider;
const omitCallBackedPromise = function (callBackedRet) {
    /*  when developer calling a method using promise,when error return from provider,the function in web3-core-method
        will return a Promise in,it's ok when writing provider in callback mode but it will cause problems when
        writing provider in Promise, this function is used to omit the rejected promise
    */
    if (callBackedRet && callBackedRet.catch) {
        callBackedRet.catch(() => null);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvdmlkZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOztBQUNaLDZCQUEyQjtBQUUzQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtBQUNwRCxpREFBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLGtDQUFpQztBQUNqQyx5Q0FBb0M7QUFDcEMsK0NBQXlEO0FBU3pELE1BQU0sWUFBYSxTQUFRLDRCQUFZO0lBTW5DLFlBQVksSUFBWSxFQUFFLE9BQU8sR0FBRyxDQUFDO1FBQ2pDLEtBQUssRUFBRSxDQUFBO1FBQ1AsSUFBSSxDQUFDLElBQUksRUFBRTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEZBQTBGLENBQUMsQ0FBQTtTQUFFO1FBRTFILE1BQU0sT0FBTyxHQUFHLFdBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFBO1NBQ3hEO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzFFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxTQUFTLENBQUMsT0FBWSxFQUFFLFFBQWtCO1FBQzdDLEtBQUssQ0FBQyxhQUFh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