'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const XHR2 = require('xhr2');
var Method;
(function (Method) {
    Method[Method["GET"] = 0] = "GET";
    Method[Method["POST"] = 1] = "POST";
})(Method = exports.Method || (exports.Method = {}));
const post = function (url, body, timeout = 0) {
    return request(Method.POST, url, body, timeout);
};
const get = function (url, timeout = 0) {
    return request(Method.GET, url, null, timeout);
};
exports.HTTP = { get, post };
const request = function (method, url, body, timeout) {
    return new Promise((resolve, reject) => {
        const xhr = new XHR2();
        xhr.timeout = timeout;
        xhr.open(Method[method], url);
        if (method === Method.POST) {
            xhr.setRequestHeader('Content-Type', 'application/json');
        }
        xhr.onreadystatechange = () => {
            if (xhr.readyState === 4) {
                const res = {
                    Code: xhr.status,
                    Body: null,
                };
                if (xhr.status === 200) {
                    try {
                        res.Body = JSON.parse(xhr.responseText);
                    }
                    catch (e) {
                        return reject(new Error(`[thor-provider]Error parsing the response: ${e.message}`));
                    }
                }
                else if (xhr.responseText && xhr.responseText.length) {
                    res.Body = xhr.responseText;
                }
                return resolve(res);
            }
        };
        xhr.ontimeout = () => {
            return reject(new Error(`[thor-provider]Time out for whatever reason, check your provider`));
        };
        try {
            xhr.send(method === Method.POST ? JSON.stringify(body) : null);
        }
        catch (e) {
            return reject(new Error(`[thor-provider]Connect error: ${e.message}`));
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWh0dHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvdmlkZXIvc2ltcGxlLWh0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOztBQUNaLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQVE1QixJQUFZLE1BR1g7QUFIRCxXQUFZLE1BQU07SUFDZCxpQ0FBTSxDQUFBO0lBQ04sbUNBQUksQ0FBQTtBQUNSLENBQUMsRUFIVyxNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUFHakI7QUFFRCxNQUFNLElBQUksR0FBRyxVQUFTLEdBQVcsRUFBRSxJQUFZLEVBQUUsT0FBTyxHQUFFLENBQUM7SUFDdkQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQ25ELENBQUMsQ0FBQTtBQUVELE1BQU0sR0FBRyxHQUFHLFVBQVMsR0FBVyxFQUFFLE9BQU8sR0FBRyxDQUFDO0lBQ3pDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUNsRCxDQUFDLENBQUE7QUFFWSxRQUFBLElBQUksR0FBRyxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsQ0FBQTtBQUUvQixNQUFNLE9BQU8sR0FBRyxVQUFTLE1BQWMsRUFBRSxHQUFXLEVBQUUsSUFBbUIsRUFBRSxPQUFlO0lBRXRGLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDbkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQTtRQUN0QixHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUM3QixJQUFJLE1BQU0sS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ3hCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztTQUM1RDtRQUVELEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLEVBQUU7WUFDMUIsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtnQkFDdEIsTUFBTSxHQUFHLEdBQW1CO29CQUN4QixJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQWdCO29CQUMxQixJQUFJLEVBQUUsSUFBSTtpQkFDYixDQUFBO2dCQUVELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7b0JBQ3BCLElBQUk7d0JBQ0EsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtxQkFDMUM7b0JBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ1IsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7cUJBQ3RGO2lCQUNKO3FCQUFNLElBQUksR0FBRyxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtvQkFDcEQsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFBO2lCQUM5QjtnQkFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTthQUN0QjtRQUNMLENBQUMsQ0FBQTtRQUVELEdBQUcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ2pCLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUMsQ0FBQTtRQUNoRyxDQUFDLENBQUE7UUFFRCxJQUFJO1lBQ0EsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDakU7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3pFO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUEifQ==