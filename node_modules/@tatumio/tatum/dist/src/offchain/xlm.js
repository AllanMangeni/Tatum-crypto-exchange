"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareXlmSignedOffchainTransaction = exports.signXlmOffchainKMSTransaction = exports.sendXlmOffchainTransaction = void 0;
const stellar_sdk_1 = require("stellar-sdk");
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
const common_1 = require("./common");
/**
 * Send Stellar transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
exports.sendXlmOffchainTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.TransferXlmOffchain);
    const { secret } = body, withdrawal = __rest(body, ["secret"]);
    if (!withdrawal.fee) {
        withdrawal.fee = '0.00001';
    }
    const memo = withdrawal.attr ? withdrawal.attr.length > 28 ? stellar_sdk_1.Memo.hash(withdrawal.attr) : stellar_sdk_1.Memo.text(withdrawal.attr) : undefined;
    const account = await blockchain_1.xlmGetAccountInfo(stellar_sdk_1.Keypair.fromSecret(secret).publicKey());
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    const { amount, address, } = withdrawal;
    let txData;
    try {
        txData = await exports.prepareXlmSignedOffchainTransaction(testnet, account, amount, address, secret, memo);
    }
    catch (e) {
        console.error(e);
        await common_1.offchainCancelWithdrawal(id);
        throw e;
    }
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: model_1.Currency.XLM })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
        throw e;
    }
};
/**
 * Sign Stellar pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param secret secret key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
exports.signXlmOffchainKMSTransaction = async (tx, secret, testnet) => {
    if (tx.chain !== model_1.Currency.XLM) {
        throw Error('Unsupported chain.');
    }
    const transaction = stellar_sdk_1.TransactionBuilder.fromXDR(tx.serializedTransaction, testnet ? stellar_sdk_1.Networks.TESTNET : stellar_sdk_1.Networks.PUBLIC);
    transaction.sign(stellar_sdk_1.Keypair.fromSecret(secret));
    return transaction.toEnvelope().toXDR().toString('base64');
};
/**
 * Sign Stellar transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param account Stellar account with information
 * @param amount amount to send
 * @param address recipient address
 * @param secret secret to sign transaction with
 * @param memo short memo to include in transaction
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareXlmSignedOffchainTransaction = async (testnet, account, amount, address, secret, memo) => {
    const builder = new stellar_sdk_1.TransactionBuilder(new stellar_sdk_1.Account(account.account_id, account.sequence), {
        fee: '100',
        networkPassphrase: testnet ? stellar_sdk_1.Networks.TESTNET : stellar_sdk_1.Networks.PUBLIC,
        memo,
    }).setTimeout(300);
    const tx = builder.addOperation(stellar_sdk_1.Operation.payment({
        destination: address,
        asset: stellar_sdk_1.Asset.native(),
        amount,
    })).build();
    tx.sign(stellar_sdk_1.Keypair.fromSecret(secret));
    return tx.toEnvelope().toXDR().toString('base64');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGxtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL29mZmNoYWluL3hsbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUFtRztBQUNuRyw4Q0FBZ0Q7QUFDaEQsOENBQWlEO0FBQ2pELG9DQUF1RTtBQUN2RSxxQ0FBOEY7QUFFOUY7Ozs7OztHQU1HO0FBQ1UsUUFBQSwwQkFBMEIsR0FBRyxLQUFLLEVBQUUsT0FBZ0IsRUFBRSxJQUF5QixFQUFFLEVBQUU7SUFDNUYsTUFBTSxvQkFBWSxDQUFDLElBQUksRUFBRSwyQkFBbUIsQ0FBQyxDQUFBO0lBQzdDLE1BQU0sRUFDRixNQUFNLEtBQ04sSUFBSSxFQURPLFVBQVUsVUFDckIsSUFBSSxFQUZGLFVBRUwsQ0FBTyxDQUFDO0lBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDakIsVUFBVSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7S0FDOUI7SUFDRCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDakksTUFBTSxPQUFPLEdBQUcsTUFBTSw4QkFBaUIsQ0FBQyxxQkFBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLE1BQU0sRUFBQyxFQUFFLEVBQUMsR0FBRyxNQUFNLGdDQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sRUFDRixNQUFNLEVBQUUsT0FBTyxHQUNsQixHQUFHLFVBQVUsQ0FBQztJQUVmLElB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