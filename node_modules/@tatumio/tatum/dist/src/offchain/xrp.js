"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareXrpSignedOffchainTransaction = exports.signXrpOffchainKMSTransaction = exports.sendXrpOffchainTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ripple_lib_1 = require("ripple-lib");
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
const common_1 = require("./common");
/**
 * Send Xrp transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
exports.sendXrpOffchainTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.TransferXrpOffchain);
    const { account, secret } = body, withdrawal = __rest(body, ["account", "secret"]);
    if (!withdrawal.fee) {
        withdrawal.fee = new bignumber_js_1.default((await blockchain_1.xrpGetFee()).drops.base_fee).dividedBy(1000000).toString();
    }
    const acc = await blockchain_1.xrpGetAccountInfo(account);
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    const { amount, fee, address, } = withdrawal;
    let txData;
    try {
        txData = await exports.prepareXrpSignedOffchainTransaction(testnet, amount, address, secret, acc, fee, withdrawal.sourceTag, withdrawal.attr);
    }
    catch (e) {
        console.error(e);
        await common_1.offchainCancelWithdrawal(id);
        throw e;
    }
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: model_1.Currency.XRP })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
        throw e;
    }
};
/**
 * Sign Xrp pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param secret secret key to sign transaction with.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.signXrpOffchainKMSTransaction = async (tx, secret) => {
    if (tx.chain !== model_1.Currency.XRP) {
        throw Error('Unsupported chain.');
    }
    const rippleAPI = new ripple_lib_1.RippleAPI();
    return rippleAPI.sign(tx.serializedTransaction, secret).signedTransaction;
};
/**
 * Sign Xrp transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param amount amount to send
 * @param address recipient address
 * @param secret secret to sign transaction with
 * @param account Xrp source account
 * @param fee fee to pay
 * @param sourceTag source tag to include in transaction
 * @param destinationTag
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareXrpSignedOffchainTransaction = async (testnet, amount, address, secret, account, fee, sourceTag, destinationTag) => {
    const currency = 'XRP';
    const payment = {
        source: {
            address: account.account_data.Account,
            maxAmount: {
                currency,
                value: amount,
            },
            tag: sourceTag,
        },
        destination: {
            address,
            amount: {
                currency,
                value: amount,
            },
        },
    };
    if (destinationTag) {
        payment.destination.tag = parseInt(destinationTag);
    }
    const rippleAPI = new ripple_lib_1.RippleAPI();
    const prepared = await rippleAPI.preparePayment(account.account_data.Account, payment, {
        fee: `${fee}`,
        sequence: account.account_data.Sequence,
        maxLedgerVersion: account.ledger_current_index + 5,
    });
    return (await rippleAPI.sign(prepared.txJSON, secret)).signedTransaction;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL29mZmNoYWluL3hycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdFQUFxQztBQUNyQywyQ0FBcUM7QUFDckMsOENBQTJEO0FBQzNELDhDQUFpRDtBQUNqRCxvQ0FBdUU7QUFDdkUscUNBQThGO0FBRTlGOzs7Ozs7R0FNRztBQUNVLFFBQUEsMEJBQTBCLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQUUsSUFBeUIsRUFBRSxFQUFFO0lBQzVGLE1BQU0sb0JBQVksQ0FBQyxJQUFJLEVBQUUsMkJBQW1CLENBQUMsQ0FBQztJQUM5QyxNQUFNLEVBQ0YsT0FBTyxFQUFFLE1BQU0sS0FDZixJQUFJLEVBRGdCLFVBQVUsVUFDOUIsSUFBSSxFQUZGLHFCQUVMLENBQU8sQ0FBQztJQUNULElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2pCLFVBQVUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxzQkFBUyxDQUFDLENBQUMsTUFBTSxzQkFBUyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3BHO0lBQ0QsTUFBTSxHQUFHLEdBQUcsTUFBTSw4QkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxNQUFNLEVBQUMsRUFBRSxFQUFDLEdBQUcsTUFBTSxnQ0FBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxNQUFNLEVBQ0YsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEdBQ3ZCLEdBQUcsVUFBVSxDQUFDO0lBRWYsSUFBSSxNQUFNLENBQUM7SUFDWCxJQUFJO1FBQ0EsTUFBTSxHQUFHLE1BQU0sMkNBQW1DLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFD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