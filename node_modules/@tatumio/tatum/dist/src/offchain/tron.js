"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTronOffchainTransaction = void 0;
const tatum_1 = require("../connector/tatum");
const constants_1 = require("../constants");
const ledger_1 = require("../ledger");
const request_1 = require("../model/request");
const transaction_1 = require("../transaction");
const wallet_1 = require("../wallet");
const common_1 = require("./common");
/**
 * Send Tron transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
exports.sendTronOffchainTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, request_1.TransferTrxOffchain);
    const { mnemonic, index, fromPrivateKey } = body, withdrawal = __rest(body, ["mnemonic", "index", "fromPrivateKey"]);
    const { amount, address } = withdrawal;
    let fromPriv;
    if (mnemonic && index !== undefined) {
        fromPriv = mnemonic && index ? await wallet_1.generatePrivateKeyFromMnemonic(request_1.Currency.TRON, testnet, mnemonic, index) : fromPrivateKey;
    }
    else if (fromPrivateKey) {
        fromPriv = fromPrivateKey;
    }
    else {
        throw new Error('No mnemonic or private key is present.');
    }
    withdrawal.fee = withdrawal.fee || '2.5';
    const account = await ledger_1.getAccountById(withdrawal.senderAccountId);
    let txData;
    if (account.currency === request_1.Currency.TRON) {
        txData = await transaction_1.prepareTronSignedTransaction(testnet, { amount, fromPrivateKey: fromPriv, to: address });
    }
    if (account.currency === request_1.Currency.USDT_TRON) {
        txData = await transaction_1.prepareTronTrc20SignedTransaction(testnet, {
            amount,
            fromPrivateKey: fromPriv,
            to: address,
            tokenAddress: constants_1.CONTRACT_ADDRESSES[request_1.Currency.USDT],
            feeLimit: parseFloat(withdrawal.fee),
        });
    }
    else {
        const vc = await ledger_1.getVirtualCurrencyByName(account.currency);
        if (vc.trcType === request_1.TrcType.TRC10) {
            txData = await transaction_1.prepareTronTrc10SignedTransaction(testnet, {
                amount,
                fromPrivateKey: fromPriv,
                to: address,
                tokenId: vc.erc20Address,
            }, vc.precision);
        }
        else if (vc.trcType === request_1.TrcType.TRC20) {
            txData = await transaction_1.prepareTronTrc20SignedTransaction(testnet, {
                amount,
                feeLimit: parseFloat(withdrawal.fee),
                fromPrivateKey: fromPriv,
                to: address,
                tokenAddress: vc.erc20Address
            });
        }
        else {
            throw new Error('Unsupported account.');
        }
    }
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: request_1.Currency.TRON })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9vZmZjaGFpbi90cm9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQWdEO0FBQ2hELDRDQUFnRDtBQUNoRCxzQ0FBbUU7QUFDbkUsOENBQXdFO0FBQ3hFLGdEQUl3QjtBQUN4QixzQ0FBeUQ7QUFDekQscUNBQThGO0FBRTlGOzs7Ozs7R0FNRztBQUNVLFFBQUEsMkJBQTJCLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQUUsSUFBeUIsRUFBRSxFQUFFO0lBQzdGLE1BQU0sb0JBQVksQ0FBQyxJQUFJLEVBQUUsNkJBQW1CLENBQUMsQ0FBQztJQUM5QyxNQUFNLEVBQ0YsUUFBUSxFQUFFLEtBQUssRUFBRSxjQUFjLEtBQy9CLElBQUksRUFEZ0MsVUFBVSxVQUM5QyxJQUFJLEVBRkYsdUNBRUwsQ0FBTyxDQUFDO0lBQ1QsTUFBTSxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUMsR0FBRyxVQUFVLENBQUM7SUFFckMsSUFBSSxRQUFnQixDQUFDO0lBQ3JCLElBQUksUUFBUSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDakMsUUFBUSxHQUFHLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sdUNBQThCLENBQUMsa0JBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBd0IsQ0FBQztLQUMzSTtTQUFNLElBQUksY0FBYyxFQUFFO1FBQ3ZCLFFBQVEsR0FBRyxjQUFjLENBQUM7S0FDN0I7U0FBTTtRQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUM3RDtJQUVELFVBQVUsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUM7SUFDekMsTUFBTSxPQUFPLEdBQUcsTUFBTSx1QkFBYyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNqRSxJQUFJLE1BQU0sQ0FBQztJQUNYLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxrQkFBUSxDQUFDLElBQUksRUFBRTtRQUNwQyxNQUFNLEdBQUcsTUFBTSwwQ0FBNEIsQ0FBQyxPQUFPLEVBQUUsRUFBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztLQUN6RztJQUNELElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxrQkFBUSxDQUFDLFNBQVMsRUFBRTtRQUN6QyxNQUFNLEdBQUcsTUFBTSwrQ0FBaUMsQ0FBQyxPQUFPLEVBQUU7WUFDdEQsTUFBTTtZQUNOLGNBQWMsRUFBRSxRQUFRO1lBQ3hCLEVBQUUsRUFBRSxPQUFPO1lBQ1gsWUFBWSxFQUFFLDhCQUFrQixDQUFDLGtCQUFRLENBQUMsSUFBSSxDQUFDO1lBQy9DLFFBQVEsRUFBRSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztTQUN2QyxDQUFDLENBQUM7S0FDTjtTQUFNO1FBQ0gsTUFBTSxFQUFFLEdBQUcsTUFBTSxpQ0FBd0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUQsSUFBSSxFQUFFLENBQUMsT0FBTyxLQUFLLGlCQUFPLENBQUMsS0FBSyxFQUFFO1lBQzlCLE1BQU0sR0FBRyxNQUFNLCtDQUFpQyxDQUFDLE9BQU8sRUFBRTtnQkFDdEQsTUFBTTtnQkFDTixjQUFjLEVBQUUsUUFBUTtnQkFDeEIsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsT0FBTyxFQUFFLEVBQUUsQ0FBQyxZQUFzQjthQUNyQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNwQjthQUFNLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxpQkFBTyxDQUFDLEtBQUssRUFBRTtZQUNyQyxNQUFNLEdBQUcsTUFBTSwrQ0FBaUMsQ0FBQyxPQUFPLEVBQUU7Z0JBQ3RELE1BQU07Z0JBQ04sUUFBUSxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO2dCQUNwQyxjQUFjLEVBQUUsUUFBUTtnQkFDeEIsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsWUFBWSxFQUFFLEVBQUUsQ0FBQyxZQUFzQjthQUMxQyxDQUFDLENBQUM7U0FDTjthQUFNO1lBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQzNDO0tBQ0o7SUFDRCxNQUFNLEVBQUMsRUFBRSxFQUFDLEdBQUcsTUFBTSxnQ0FBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxJQUFJO1FBQ0EsdUNBQVcsTUFBTSwwQkFBaUIsQ0FBQyxFQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxrQkFBUSxDQUFDLElBQUksRUFBQyxDQUFDLEtBQUUsRUFBRSxJQUFFO0tBQ2hHO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUk7WUFDQSxNQUFNLGlDQUF3QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBQUMsT0FBTyxFQUFFLEVBQUU7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsT0FBTyxFQUFDLEVBQUUsRUFBQyxDQUFDO1NBQ2Y7S0FDSjtBQUNMLENBQUMsQ0FBQyJ9