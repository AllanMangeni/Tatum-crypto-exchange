"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareEthErc20SignedOffchainTransaction = exports.prepareEthSignedOffchainTransaction = exports.signEthOffchainKMSTransaction = exports.sendEthErc20OffchainTransaction = exports.sendEthOffchainTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const web3_1 = __importDefault(require("web3"));
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const constants_1 = require("../constants");
const token_abi_1 = __importDefault(require("../contracts/erc20/token_abi"));
const ledger_1 = require("../ledger");
const model_1 = require("../model");
const transaction_1 = require("../transaction");
const wallet_1 = require("../wallet");
const common_1 = require("./common");
/**
 * Send Ethereum transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
exports.sendEthOffchainTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.TransferEthOffchain);
    const { mnemonic, index, privateKey, nonce } = body, withdrawal = __rest(body, ["mnemonic", "index", "privateKey", "nonce"]);
    const { amount, address } = withdrawal;
    let fromPriv;
    if (mnemonic && index !== undefined) {
        fromPriv = mnemonic && index ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ETH, testnet, mnemonic, index) : privateKey;
    }
    else if (privateKey) {
        fromPriv = privateKey;
    }
    else {
        throw new Error('No mnemonic or private key is present.');
    }
    const web3 = new web3_1.default(provider || `${constants_1.TATUM_API_URL}/v3/ethereum/web3/${process.env.TATUM_API_KEY}`);
    web3.eth.accounts.wallet.add(fromPriv);
    web3.eth.defaultAccount = web3.eth.accounts.wallet[0].address;
    const gasPrice = body.gasPrice ? web3.utils.toWei(body.gasPrice, 'gwei') : await transaction_1.ethGetGasPriceInWei();
    const account = await ledger_1.getAccountById(withdrawal.senderAccountId);
    const { txData, gasLimit } = await exports.prepareEthSignedOffchainTransaction({
        amount,
        privateKey: fromPriv,
        address,
        currency: account.currency,
        web3,
        gasPrice,
        nonce,
        gasLimit: body.gasLimit
    });
    // @ts-ignore
    withdrawal.fee = new bignumber_js_1.default(web3.utils.fromWei(new bignumber_js_1.default(body.gasLimit || gasLimit).multipliedBy(gasPrice).toString(), 'ether')).toString();
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: model_1.Currency.ETH })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
        throw e;
    }
};
/**
 * Send Ethereum ERC20 transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
exports.sendEthErc20OffchainTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.TransferEthErc20Offchain);
    const { mnemonic, index, privateKey, nonce } = body, withdrawal = __rest(body, ["mnemonic", "index", "privateKey", "nonce"]);
    const { amount, address } = withdrawal;
    let fromPriv;
    if (mnemonic && index !== undefined) {
        fromPriv = mnemonic && index ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ETH, testnet, mnemonic, index) : privateKey;
    }
    else if (privateKey) {
        fromPriv = privateKey;
    }
    else {
        throw new Error('No mnemonic or private key is present.');
    }
    const web3 = new web3_1.default(provider || `${constants_1.TATUM_API_URL}/v3/ethereum/web3/${process.env.TATUM_API_KEY}`);
    web3.eth.accounts.wallet.add(fromPriv);
    web3.eth.defaultAccount = web3.eth.accounts.wallet[0].address;
    const gasPrice = body.gasPrice ? web3.utils.toWei(body.gasPrice, 'gwei') : await transaction_1.ethGetGasPriceInWei();
    const account = await ledger_1.getAccountById(withdrawal.senderAccountId);
    if (model_1.ETH_BASED_CURRENCIES.includes(account.currency)) {
        return exports.sendEthOffchainTransaction(testnet, body, provider);
    }
    const vc = await ledger_1.getVirtualCurrencyByName(account.currency);
    const { txData, gasLimit } = await exports.prepareEthErc20SignedOffchainTransaction({
        amount,
        privateKey: fromPriv,
        address,
        web3,
        tokenAddress: vc.erc20Address,
        gasPrice,
        nonce,
        gasLimit: body.gasLimit
    });
    // @ts-ignore
    withdrawal.fee = new bignumber_js_1.default(web3.utils.fromWei(new bignumber_js_1.default(gasLimit).multipliedBy(gasPrice).toString(), 'ether')).toString();
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: model_1.Currency.ETH })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
        throw e;
    }
};
/**
 * Sign Ethereum pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.signEthOffchainKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {
    if (tx.chain !== model_1.Currency.ETH) {
        throw Error('Unsupported chain.');
    }
    const client = new web3_1.default(provider || `${constants_1.TATUM_API_URL}/v3/ethereum/web3/${process.env.TATUM_API_KEY}`);
    client.eth.accounts.wallet.clear();
    client.eth.accounts.wallet.add(fromPrivateKey);
    client.eth.defaultAccount = client.eth.accounts.wallet[0].address;
    const transactionConfig = JSON.parse(tx.serializedTransaction);
    transactionConfig.gas = await client.eth.estimateGas(transactionConfig);
    if (!transactionConfig.nonce) {
        transactionConfig.nonce = await blockchain_1.ethGetTransactionsCount(client.eth.defaultAccount);
    }
    return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Ethereum transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @returns transaction data to be broadcast to blockchain.
 * @param prepareEthSignedOffchainTransaction
 */
exports.prepareEthSignedOffchainTransaction = async (prepareEthSignedOffchainTransaction) => {
    await tatum_1.validateBody(prepareEthSignedOffchainTransaction, model_1.PrepareEthSignedOffchainTransaction);
    const { currency, address, amount, gasLimit, gasPrice, nonce, privateKey, web3, } = prepareEthSignedOffchainTransaction;
    let tx;
    if (currency === 'ETH') {
        tx = {
            from: 0,
            to: address.trim(),
            value: web3.utils.toWei(amount, 'ether'),
            gasPrice,
            nonce,
        };
    }
    else {
        if (!Object.keys(constants_1.CONTRACT_ADDRESSES).includes(currency)) {
            throw new Error('Unsupported ETH ERC20 blockchain.');
        }
        // @ts-ignore
        const contract = new web3.eth.Contract(token_abi_1.default, constants_1.CONTRACT_ADDRESSES[currency]);
        tx = {
            from: 0,
            to: constants_1.CONTRACT_ADDRESSES[currency],
            data: contract.methods.transfer(address.trim(), `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(constants_1.CONTRACT_DECIMALS[currency])).toString(16)}`).encodeABI(),
            gasPrice,
            nonce,
        };
    }
    tx.gas = gasLimit || await web3.eth.estimateGas(tx);
    return {
        txData: (await web3.eth.accounts.signTransaction(tx, privateKey)).rawTransaction,
        gasLimit: tx.gas,
    };
};
/**
 * Sign Ethereum custom ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @returns transaction data to be broadcast to blockchain.
 * @param prepareEthErc20SignedOffchainTransaction
 */
exports.prepareEthErc20SignedOffchainTransaction = async (prepareEthErc20SignedOffchainTransaction) => {
    await tatum_1.validateBody(prepareEthErc20SignedOffchainTransaction, model_1.PrepareEthErc20SignedOffchainTransaction);
    const { amount, privateKey, address, gasPrice, nonce, tokenAddress, web3, gasLimit, } = prepareEthErc20SignedOffchainTransaction;
    // @ts-ignore
    const contract = new web3.eth.Contract(token_abi_1.default, tokenAddress);
    let tx;
    tx = {
        from: 0,
        to: tokenAddress.trim(),
        data: contract.methods.transfer(address.trim(), `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(18)).toString(16)}`).encodeABI(),
        gasPrice,
        nonce,
    };
    tx.gas = gasLimit || await web3.eth.estimateGas(tx);
    return {
        txData: (await web3.eth.accounts.signTransaction(tx, privateKey)).rawTransaction,
        gasLimit: tx.gas,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL29mZmNoYWluL2V0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdFQUFxQztBQUNyQyxnREFBd0I7QUFFeEIsOENBQXNEO0FBQ3RELDhDQUFnRDtBQUNoRCw0Q0FBa0Y7QUFDbEYsNkVBQW9EO0FBQ3BELHNDQUFtRTtBQUNuRSxvQ0FPa0I7QUFDbEIsZ0RBQW1EO0FBQ25ELHNDQUF5RDtBQUN6RCxxQ0FBOEY7QUFFOUY7Ozs7Ozs7R0FPRztBQUNVLFFBQUEsMEJBQTBCLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQUUsSUFBeUIsRUFBRSxRQUFpQixFQUFFLEVBQUU7SUFDL0csTUFBTSxvQkFBWSxDQUFDLElBQUksRUFBRSwyQkFBbUIsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sRUFDRixRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxLQUFLLEtBQ2xDLElBQUksRUFEbUMsVUFBVSxVQUNqRCxJQUFJLEVBRkYsNENBRUwsQ0FBTyxDQUFDO0lBQ1QsTUFBTSxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUMsR0FBRyxVQUFVLENBQUM7SUFFckMsSUFBSSxRQUFnQixDQUFDO0lBQ3JCLElBQUksUUFBUSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDakMsUUFBUSxHQUFHLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sdUNBQThCLENBQUMsZ0JBQVEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBb0IsQ0FBQztLQUN0STtTQUFNLElBQUksVUFBVSxFQUFFO1FBQ25CLFFBQVEsR0FBRyxVQUFVLENBQUM7S0FDekI7U0FBTTtRQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUM3RDtJQUVELE1BQU0sSUFBSSxHQUFHLElBQUks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