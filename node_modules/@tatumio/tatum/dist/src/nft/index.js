"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferNFT = exports.burnNFT = exports.mintMultipleNFTWithUri = exports.mintNFTWithUri = exports.deployNFT = exports.getNFTMetadataURI = exports.getNFTsByAddress = void 0;
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
const transaction_1 = require("../transaction");
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/NftGetBalanceErc721" target="_blank">Tatum API documentation</a>
 */
exports.getNFTsByAddress = async (chain, contractAddress, address) => tatum_1.get(`/v3/nft/balance/${chain}/${contractAddress}/${address}`);
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/NftGetMetadataErc721" target="_blank">Tatum API documentation</a>
 */
exports.getNFTMetadataURI = async (chain, contractAddress, tokenId) => tatum_1.get(`/v3/nft/metadata/${chain}/${contractAddress}/${tokenId}`);
exports.deployNFT = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloDeployErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendDeployErc721Transaction(body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendDeployBep721Transaction(body, provider);
    }
};
exports.mintNFTWithUri = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloMinErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendMintErc721Transaction(body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendMintBep721Transaction(body, provider);
    }
};
exports.mintMultipleNFTWithUri = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloMintMultipleErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendMintMultipleErc721Transaction(body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendMintMultipleBep721Transaction(body, provider);
    }
};
exports.burnNFT = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloBurnErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendBurnErc721Transaction(body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBurnBep721Transaction(body, provider);
    }
};
exports.transferNFT = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloTransferErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendErc721Transaction(body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBep721Transaction(body, provider);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmZ0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUF1QztBQUN2QyxvQ0FZa0I7QUFDbEIsZ0RBZ0J3QjtBQUV4Qjs7R0FFRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsS0FBSyxFQUFFLEtBQWUsRUFBRSxlQUF1QixFQUFFLE9BQWUsRUFBcUIsRUFBRSxDQUFDLFdBQUcsQ0FBQyxtQkFBbUIsS0FBSyxJQUFJLGVBQWUsSUFBSSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBRXRMOztHQUVHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLGVBQXVCLEVBQUUsT0FBZSxFQUE2QixFQUFFLENBQUMsV0FBRyxDQUFDLG9CQUFvQixLQUFLLElBQUksZUFBZSxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFbkwsUUFBQSxTQUFTLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQUUsSUFBd0MsRUFBRSxRQUFpQixFQUFFLEVBQUU7SUFDN0csUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2hCLEtBQUssZ0JBQVEsQ0FBQyxJQUFJO1lBQ2QsT0FBTyw2Q0FBK0IsQ0FBQyxPQUFPLEVBQUUsSUFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4RixLQUFLLGdCQUFRLENBQUMsR0FBRztZQUNiLE9BQU8seUNBQTJCLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELEtBQUssZ0JBQVEsQ0FBQyxHQUFHO1lBQ2IsT0FBTyx5Q0FBMkIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDMUQ7QUFDTCxDQUFDLENBQUM7QUFFVyxRQUFBLGNBQWMsR0FBRyxLQUFLLEVBQUUsT0FBZ0IsRUFBRSxJQUFvQyxFQUFFLFFBQWlCLEVBQUUsRUFBRTtJQUM5RyxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDaEIsS0FBSyxnQkFBUSxDQUFDLElBQUk7WUFDZCxPQUFPLDBDQUE0QixDQUFDLE9BQU8sRUFBRSxJQUFzQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ25GLEtBQUssZ0JBQVEsQ0FBQyxHQUFHO1lBQ2IsT0FBTyx1Q0FBeUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckQsS0FBSyxnQkFBUSxDQUFDLEdBQUc7WUFDYixPQUFPLHVDQUF5QixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN4RDtBQUNMLENBQUMsQ0FBQztBQUVXLFFBQUEsc0JBQXNCLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQUUsSUFBb0QsRUFBRSxRQUFpQixFQUFFLEVBQUU7SUFDdEksUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2hCLEtBQUssZ0JBQVEsQ0FBQyxJQUFJO1lBQ2QsT0FBTyxtREFBcUMsQ0FBQyxPQUFPLEVBQUUsSUFBOEIsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwRyxLQUFLLGdCQUFRLENBQUMsR0FBRztZQUNiLE9BQU8sK0NBQWlDLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdELEtBQUssZ0JBQVEsQ0FBQyxHQUFHO1lBQ2IsT0FBTywrQ0FBaUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDaEU7QUFDTCxDQUFDLENBQUM7QUFFVyxRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsT0FBZ0IsRUFBRSxJQUFvQyxFQUFFLFFBQWlCLEVBQUUsRUFBRTtJQUN2RyxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDaEIsS0FBSyxnQkFBUSxDQUFDLElBQUk7WUFDZCxPQUFPLDJDQUE2QixDQUFDLE9BQU8sRUFBRSxJQUFzQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BGLEtBQUssZ0JBQVEsQ0FBQyxHQUFHO1lBQ2IsT0FBTyx1Q0FBeUIsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckQsS0FBSyxnQkFBUSxDQUFDLEdBQUc7WUFDYixPQUFPLHVDQUF5QixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN4RDtBQUNMLENBQUMsQ0FBQztBQUVXLFFBQUEsV0FBVyxHQUFHLEtBQUssRUFBRSxPQUFnQixFQUFFLElBQTRDLEVBQUUsUUFBaUIsRUFBRSxFQUFFO0lBQ25ILFFBQVEsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNoQixLQUFLLGdCQUFRLENBQUMsSUFBSTtZQUNkLE9BQU8sK0NBQWlDLENBQUMsT0FBTyxFQUFFLElBQTBCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUYsS0FBSyxnQkFBUSxDQUFDLEdBQUc7WUFDYixPQUFPLG1DQUFxQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqRCxLQUFLLGdCQUFRLENBQUMsR0FBRztZQUNiLE9BQU8sbUNBQXFCLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3BEO0FBQ0wsQ0FBQyxDQUFDIn0=