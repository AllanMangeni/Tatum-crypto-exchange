"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const model_1 = require("../model");
const index_1 = require("./index");
describe('NFT tests', () => {
    jest.setTimeout(19999);
    describe('NFT CELO transactions', () => {
        // ERC-721
        it('should test valid deploy 721 transaction', async () => {
            const body = new model_1.CeloDeployErc721();
            body.fromPrivateKey = '0x4874827a55d87f2309c55b835af509e3427aa4d52321eeb49a2b93b5c0f8edfb';
            body.name = 'Tatum';
            body.symbol = 'TTM';
            body.feeCurrency = model_1.Currency.CUSD;
            body.chain = model_1.Currency.CELO;
            expect(await index_1.deployNFT(true, body, 'https://alfajores-forno.celo-testnet.org')).toBeDefined();
        });
        it('should test valid mint 721 transaction', async () => {
            const body = new model_1.CeloMintErc721();
            body.fromPrivateKey = '0x4874827a55d87f2309c55b835af509e3427aa4d52321eeb49a2b93b5c0f8edfb';
            body.to = '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea';
            body.contractAddress = '0x3e1a302DA9345ae6f8188607C017d342A4CCf22e';
            body.tokenId = '3';
            body.url = 'https://google.com';
            body.feeCurrency = model_1.Currency.CUSD;
            body.chain = model_1.Currency.CELO;
            expect(await index_1.mintNFTWithUri(true, body, 'https://alfajores-forno.celo-testnet.org')).toBeDefined();
        });
        it('should test valid mint multiple 721 transaction', async () => {
            const body = new model_1.CeloMintMultipleErc721();
            body.fromPrivateKey = '0x4874827a55d87f2309c55b835af509e3427aa4d52321eeb49a2b93b5c0f8edfb';
            body.to = ['0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea', '0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea'];
            body.contractAddress = '0x3e1a302DA9345ae6f8188607C017d342A4CCf22e';
            body.tokenId = ['4', '5'];
            body.url = ['https://google.com', 'https://google.com'];
            body.feeCurrency = model_1.Currency.CUSD;
            body.chain = model_1.Currency.CELO;
            expect(await index_1.mintMultipleNFTWithUri(true, body, 'https://alfajores-forno.celo-testnet.org')).toBeDefined();
        });
        it('should test valid burn 721 transaction', async () => {
            const body = new model_1.CeloBurnErc721();
            body.fromPrivateKey = '0x4874827a55d87f2309c55b835af509e3427aa4d52321eeb49a2b93b5c0f8edfb';
            body.contractAddress = '0x3e1a302DA9345ae6f8188607C017d342A4CCf22e';
            body.tokenId = '3';
            body.feeCurrency = model_1.Currency.CUSD;
            body.chain = model_1.Currency.CELO;
            expect(await index_1.burnNFT(true, body, 'https://alfajores-forno.celo-testnet.org')).toBeDefined();
        });
        it('should test valid transfer 721 transaction', async () => {
            const body = new model_1.CeloTransferErc721();
            body.fromPrivateKey = '0x4874827a55d87f2309c55b835af509e3427aa4d52321eeb49a2b93b5c0f8edfb';
            body.contractAddress = '0x3e1a302DA9345ae6f8188607C017d342A4CCf22e';
            body.to = '0x10168acf3231ccc7b16ba53f17dd4d8bdecf4e1a';
            body.tokenId = '5';
            body.feeCurrency = model_1.Currency.CUSD;
            body.chain = model_1.Currency.CELO;
            expect(await index_1.transferNFT(true, body, 'https://alfajores-forno.celo-testnet.org')).toBeDefined();
        });
    });
    describe('NFT ETH transactions', () => {
        it('should test eth 721 deploy transaction', async () => {
            const deployErc721Token = await index_1.deployNFT(true, {
                symbol: '1oido3id3',
                chain: model_1.Currency.ETH,
                fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
                name: '2123kd',
            });
            expect(deployErc721Token).not.toBeNull();
            console.log(deployErc721Token);
        });
        it('should test eth 721 mint transaction', async () => {
            const tokenId = new Date().getTime().toString();
            const mintedToken = await index_1.mintNFTWithUri(true, {
                to: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                chain: model_1.Currency.ETH,
                tokenId,
                url: 'https://www.seznam.cz',
                fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
                contractAddress: '0xAB12C6c926Cc3c9547aad71d6082fA724152A442',
                fee: {
                    gasLimit: '500000',
                    gasPrice: '110'
                }
            });
            console.log(tokenId);
            expect(mintedToken).not.toBeNull();
        });
        it('should test eth 721 mint multiple transaction', async () => {
            const firstTokenId = new Date().getTime();
            const secondTokenId = firstTokenId + 1;
            const mintedTokens = await index_1.mintMultipleNFTWithUri(true, {
                to: ['0x811dfbff13adfbc3cf653dcc373c03616d3471c9', '0x811dfbff13adfbc3cf653dcc373c03616d3471c9'],
                chain: model_1.Currency.ETH,
                tokenId: [firstTokenId.toString(), secondTokenId.toString()],
                url: ['https://www.seznam.cz', 'https://www.seznam.cz'],
                fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
                contractAddress: '0xab12c6c926cc3c9547aad71d6082fa724152a442',
                fee: {
                    gasLimit: '500000',
                    gasPrice: '100'
                }
            });
            console.log(mintedTokens);
            expect(mintedTokens).not.toBeNull();
        });
        it('should test eth 721 burn transaction', async () => {
            const burnErc721Token = await index_1.burnNFT(true, {
                tokenId: '1615884747446',
                chain: model_1.Currency.ETH,
                fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
                contractAddress: '0xab12c6c926cc3c9547aad71d6082fa724152a442',
                fee: {
                    gasLimit: '5000000',
                    gasPrice: '1100'
                },
            });
            expect(burnErc721Token).not.toBeNull();
        });
        it('should test eth 721 send transaction', async () => {
            const sendErc721Token = await index_1.transferNFT(true, {
                to: '0x811dfbff13adfbc3cf653dcc373c03616d3471c9',
                chain: model_1.Currency.ETH,
                tokenId: '1615884907854',
                fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
                contractAddress: '0xab12c6c926cc3c9547aad71d6082fa724152a442',
                fee: {
                    gasLimit: '5000000',
                    gasPrice: '100'
                },
            });
            expect(sendErc721Token).not.toBeNull();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmZ0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbmZ0L25mdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBT2tCO0FBQ2xCLG1DQUFnRztBQUVoRyxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsVUFBVTtRQUNWLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN0RCxNQUFNLElBQUksR0FBRyxJQUFJLHdCQUFnQixFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxvRUFBb0UsQ0FBQztZQUMzRixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQVEsQ0FBQyxJQUFJLENBQUM7WUFDM0IsTUFBTSxDQUFDLE1BQU0saUJBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsRyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNwRCxNQUFNLElBQUksR0FBRyxJQUFJLHNCQUFjLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsY0FBYyxHQUFHLG9FQUFvRSxDQUFDO1lBQzNGLElBQUksQ0FBQyxFQUFFLEdBQUcsNENBQTRDLENBQUM7WUFDdkQsSUFBSSxDQUFDLGVBQWUsR0FBRyw0Q0FBNEMsQ0FBQztZQUNwRSxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FB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