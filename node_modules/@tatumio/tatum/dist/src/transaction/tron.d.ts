import { CreateTronTrc10, CreateTronTrc20, FreezeTron, TransactionKMS, TransferTron, TransferTronTrc10, TransferTronTrc20 } from '../model';
/**
 * Send Tron transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendTronTransaction: (testnet: boolean, body: TransferTron) => Promise<import("../model").TransactionHash>;
/**
 * Send Tron Freeze balance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
export declare const freezeTronTransaction: (testnet: boolean, body: FreezeTron) => Promise<import("../model").TransactionHash>;
/**
 * Send Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendTronTrc10Transaction: (testnet: boolean, body: TransferTronTrc10) => Promise<import("../model").TransactionHash>;
/**
 * Send Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendTronTrc20Transaction: (testnet: boolean, body: TransferTronTrc20) => Promise<import("../model").TransactionHash>;
/**
 * Create Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
export declare const createTronTrc10Transaction: (testnet: boolean, body: CreateTronTrc10) => Promise<import("../model").TransactionHash>;
/**
 * Create Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
export declare const createTronTrc20Transaction: (testnet: boolean, body: CreateTronTrc20) => Promise<import("../model").TransactionHash>;
/**
 * Sign Tron pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const signTronKMSTransaction: (tx: TransactionKMS, fromPrivateKey: string, testnet: boolean) => Promise<string>;
/**
 * Sign Tron transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronSignedTransaction: (testnet: boolean, body: TransferTron) => Promise<string>;
/**
 * Sign Tron Freeze balance transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronFreezeTransaction: (testnet: boolean, body: FreezeTron) => Promise<string>;
/**
 * Sign Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param precision
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronTrc10SignedTransaction: (testnet: boolean, body: TransferTronTrc10, precision?: number | undefined) => Promise<string>;
/**
 * Sign Tron TRC20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronTrc20SignedTransaction: (testnet: boolean, body: TransferTronTrc20) => Promise<string>;
/**
 * Sign create Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronCreateTrc10SignedTransaction: (testnet: boolean, body: CreateTronTrc10) => Promise<string>;
/**
 * Sign create Tron TRC20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronCreateTrc20SignedTransaction: (testnet: boolean, body: CreateTronTrc20) => Promise<string>;
/**
 * Prepare Tron transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronSignedKMSTransaction: (testnet: boolean, body: TransferTron) => Promise<string>;
/**
 * Prepare Tron Freeze balance transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronFreezeKMSTransaction: (testnet: boolean, body: FreezeTron) => Promise<string>;
/**
 * Prepare Tron TRC10 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param precision
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronTrc10SignedKMSTransaction: (testnet: boolean, body: TransferTronTrc10, precision?: number | undefined) => Promise<string>;
/**
 * Prepare Tron TRC20 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronTrc20SignedKMSTransaction: (testnet: boolean, body: TransferTronTrc20) => Promise<string>;
/**
 * Prepare create Tron TRC10 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronCreateTrc10SignedKMSTransaction: (testnet: boolean, body: CreateTronTrc10) => Promise<string>;
/**
 * Prepare create Tron TRC20 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareTronCreateTrc20SignedKMSTransaction: (testnet: boolean, body: CreateTronTrc20) => Promise<string>;
/**
 * Sign Tron pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const signTrxKMSTransaction: (tx: TransactionKMS, fromPrivateKey: string, testnet: boolean) => Promise<string>;
export declare const transferHexToBase58Address: (address: string) => any;
