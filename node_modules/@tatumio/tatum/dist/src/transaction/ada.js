"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareADATransaction = void 0;
const cardano_serialization_lib_nodejs_1 = __importDefault(require("@emurgo/cardano-serialization-lib-nodejs"));
const tatum_1 = require("../connector/tatum");
/**
 * Prepare a signed ADA transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @param body content of the transaction to prepare.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
exports.prepareADATransaction = async (body) => {
    const fromAddress = cardano_serialization_lib_nodejs_1.default.Address.from_bech32(body.from);
    const toAddress = cardano_serialization_lib_nodejs_1.default.Address.from_bech32(body.to);
    const utxos = await tatum_1.get(`/v3/cardano/${body.from}/utxos`);
    let fromQuantity = 0;
    for (const utxo of utxos) {
        fromQuantity += parseInt(utxo.value);
    }
    const prvKey = cardano_serialization_lib_nodejs_1.default.Bip32PrivateKey.from_128_xprv(Buffer.from(body.privateKey, 'hex')).to_raw_key();
    const txBuilder = cardano_serialization_lib_nodejs_1.default.TransactionBuilder.new(cardano_serialization_lib_nodejs_1.default.LinearFee.new(cardano_serialization_lib_nodejs_1.default.BigNum.from_str('44'), cardano_serialization_lib_nodejs_1.default.BigNum.from_str('155381')), cardano_serialization_lib_nodejs_1.default.BigNum.from_str('1000000'), cardano_serialization_lib_nodejs_1.default.BigNum.from_str('500000000'), cardano_serialization_lib_nodejs_1.default.BigNum.from_str('2000000'));
    const { tip: { slotNo } } = await tatum_1.get('/v3/cardano/info');
    txBuilder.set_ttl(slotNo + 200);
    let total = 0;
    for (const utxo of utxos) {
        let amount = parseInt(utxo.value);
        if (total + amount > body.amount) {
            amount = body.amount - total;
        }
        txBuilder.add_key_input(prvKey.to_public().hash(), cardano_serialization_lib_nodejs_1.default.TransactionInput.new(cardano_serialization_lib_nodejs_1.default.TransactionHash.from_bytes(Buffer.from(utxo.txHash, 'hex')), utxo.index), cardano_serialization_lib_nodejs_1.default.Value.new(cardano_serialization_lib_nodejs_1.default.BigNum.from_str(String(amount))));
        total += amount;
        if (total === body.amount)
            break;
    }
    txBuilder.add_output(cardano_serialization_lib_nodejs_1.default.TransactionOutput.new(toAddress, cardano_serialization_lib_nodejs_1.default.Value.new(cardano_serialization_lib_nodejs_1.default.BigNum.from_str(String(body.amount)))));
    const tmpOutput = cardano_serialization_lib_nodejs_1.default.TransactionOutput.new(fromAddress, cardano_serialization_lib_nodejs_1.default.Value.new(cardano_serialization_lib_nodejs_1.default.BigNum.from_str(String('1000000'))));
    const fee = parseInt(txBuilder.min_fee().to_str()) + parseInt(txBuilder.fee_for_output(tmpOutput).to_str());
    txBuilder.add_output(cardano_serialization_lib_nodejs_1.default.TransactionOutput.new(fromAddress, cardano_serialization_lib_nodejs_1.default.Value.new(cardano_serialization_lib_nodejs_1.default.BigNum.from_str(String(fromQuantity - body.amount - fee)))));
    txBuilder.set_fee(cardano_serialization_lib_nodejs_1.default.BigNum.from_str(String(fee)));
    const txBody = txBuilder.build();
    const txHash = cardano_serialization_lib_nodejs_1.default.hash_transaction(txBody);
    const vkeyWitnesses = cardano_serialization_lib_nodejs_1.default.Vkeywitnesses.new();
    vkeyWitnesses.add(cardano_serialization_lib_nodejs_1.default.make_vkey_witness(txHash, prvKey));
    const witnesses = cardano_serialization_lib_nodejs_1.default.TransactionWitnessSet.new();
    witnesses.set_vkeys(vkeyWitnesses);
    return Buffer.from(cardano_serialization_lib_nodejs_1.default.Transaction.new(txBody, witnesses).to_bytes()).toString('hex');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RyYW5zYWN0aW9uL2FkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnSEFBbUU7QUFDbkUsOENBQXlDO0FBR3pDOzs7O0dBSUc7QUFDVSxRQUFBLHFCQUFxQixHQUFHLEtBQUssRUFBRSxJQUFpQixFQUFFLEVBQUU7SUFDL0QsTUFBTSxXQUFXLEdBQUcsMENBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRCxNQUFNLFNBQVMsR0FBRywwQ0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTNELE1BQU0sS0FBSyxHQUFlLE1BQU0sV0FBRyxDQUFDLGVBQWUsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7SUFDdEUsSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLFlBQVksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RDO0lBRUQsTUFBTSxNQUFNLEdBQUcsMENBQVcsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQ3BDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFakIsTUFBTSxTQUFTLEdBQUcsMENBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQ2xELDBDQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FDdkIsMENBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUNqQywwQ0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQ3RDLEVBQ0QsMENBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFD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