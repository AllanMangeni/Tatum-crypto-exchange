"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendQuorumTransaction = exports.sendStoreDataQuorumTransaction = void 0;
const axios_1 = __importDefault(require("axios"));
const web3_utils_1 = require("web3-utils");
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
const model_2 = require("../model");
/**
 * Send Quorum store data transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Quorum Server to connect to.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendStoreDataQuorumTransaction = async (body, provider) => {
    await tatum_1.validateBody(body, model_1.CreateRecord);
    const data = (await axios_1.default.post(provider, {
        'jsonrpc': '2.0',
        'method': 'eth_sendTransaction',
        'params': [{
                from: body.from,
                to: body.to,
                nonce: body.nonce,
                data: body.data ? (web3_utils_1.isHex(body.data) ? web3_utils_1.stringToHex(body.data) : web3_utils_1.toHex(body.data)) : undefined,
            }],
        'id': 1
    })).data;
    if (data.result) {
        return { txId: data.result };
    }
    throw new Error(data.error.message);
};
/**
 * Send Quorum transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Quorum Server to connect to.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendQuorumTransaction = async (body, provider) => {
    await tatum_1.validateBody(body, model_2.TransferQuorum);
    const data = (await axios_1.default.post(provider, {
        'jsonrpc': '2.0',
        'method': 'eth_sendTransaction',
        'params': [body],
        'id': 1
    })).data;
    if (data.result) {
        return { txId: data.result };
    }
    throw new Error(data.error.message);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVvcnVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RyYW5zYWN0aW9uL3F1b3J1bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsMkNBQXFEO0FBQ3JELDhDQUFpRDtBQUNqRCxvQ0FBc0M7QUFDdEMsb0NBQXdDO0FBRXhDOzs7Ozs7R0FNRztBQUNVLFFBQUEsOEJBQThCLEdBQUcsS0FBSyxFQUFFLElBQWtCLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO0lBQzNGLE1BQU0sb0JBQVksQ0FBQyxJQUFJLEVBQUUsb0JBQVksQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxlQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNyQyxTQUFTLEVBQUUsS0FBSztRQUNoQixRQUFRLEVBQUUscUJBQXFCO1FBQy9CLFFBQVEsRUFBRSxDQUFDO2dCQUNQLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7YUFDL0YsQ0FBQztRQUNGLElBQUksRUFBRSxDQUFDO0tBQ1YsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ2IsT0FBTyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUM7S0FDOUI7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ1UsUUFBQSxxQkFBcUIsR0FBRyxLQUFLLEVBQUUsSUFBb0IsRUFBRSxRQUFnQixFQUFFLEVBQUU7SUFDbEYsTUFBTSxvQkFBWSxDQUFDLElBQUksRUFBRSxzQkFBYyxDQUFDLENBQUE7SUFDeEMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLGVBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ3JDLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLFFBQVEsRUFBRSxxQkFBcUI7UUFDL0IsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ2hCLElBQUksRUFBRSxDQUFDO0tBQ1YsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ2IsT0FBTyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUM7S0FDOUI7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsQ0FBQyxDQUFDIn0=