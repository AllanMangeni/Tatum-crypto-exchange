"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendDeployBep721Transaction = exports.sendBep721Transaction = exports.sendBurnBep721Transaction = exports.sendMintMultipleBep721Transaction = exports.sendMintBep721Transaction = exports.sendBscSmartContractMethodInvocationTransaction = exports.sendDeployBep20Transaction = exports.sendCustomBep20Transaction = exports.sendBscOrBep20Transaction = exports.sendBscStoreDataTransaction = exports.sendBscSmartContractReadMethodInvocationTransaction = exports.prepareBscDeployBep721SignedTransaction = exports.prepareBscTransferBep721SignedTransaction = exports.prepareBscBurnBep721SignedTransaction = exports.prepareBscMintMultipleBep721SignedTransaction = exports.prepareBscMintBep721SignedTransaction = exports.prepareBscSmartContractWriteMethodInvocation = exports.prepareDeployBep20SignedTransaction = exports.prepareCustomBep20SignedTransaction = exports.prepareBscOrBep20SignedTransaction = exports.prepareBscStoreDataTransaction = exports.signBscKMSTransaction = exports.getBscClient = exports.bscGetGasPriceInWei = void 0;
const axios_1 = __importDefault(require("axios"));
const bignumber_js_1 = require("bignumber.js");
const web3_1 = __importDefault(require("web3"));
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const constants_1 = require("../constants");
const token_abi_1 = __importDefault(require("../contracts/erc20/token_abi"));
const token_bytecode_1 = __importDefault(require("../contracts/erc20/token_bytecode"));
const erc721_abi_1 = __importDefault(require("../contracts/erc721/erc721_abi"));
const erc721_bytecode_1 = __importDefault(require("../contracts/erc721/erc721_bytecode"));
const model_1 = require("../model");
/**
 * Estimate Gas price for the transaction.
 */
exports.bscGetGasPriceInWei = async () => {
    const { data } = await axios_1.default.post('https://graphql.bitquery.io', {
        'query': 'query ($network: EthereumNetwork!, $dateFormat: String!, $from: ISO8601DateTime, $till: ISO8601DateTime) {\n  ethereum(network: $network) {\n    transactions(options: {asc: "date.date"}, date: {since: $from, till: $till}) {\n      date: date {\n        date(format: $dateFormat)\n      }\n      gasPrice\n      gasValue\n      average: gasValue(calculate: average)\n      maxGasPrice: gasPrice(calculate: maximum)\n      medianGasPrice: gasPrice(calculate: median)\n    }\n  }\n}\n',
        'variables': {
            'limit': 10,
            'offset': 0,
            'network': 'bsc',
            'from': new Date().toISOString(),
            'till': null,
            'dateFormat': '%Y-%m-%d'
        }
    });
    const gasPrice = new bignumber_js_1.BigNumber(data.data.ethereum.transactions[0].gasPrice);
    return web3_1.default.utils.toWei(gasPrice.isGreaterThan(20) ? gasPrice.toFormat(9) : '20', 'gwei');
};
/**
 * Returns BSC server to connect to.
 *
 * @param provider url of the BSC Server to connect to. If not set, default public server will be used.
 * @param fromPrivateKey optional private key of sender account
 */
exports.getBscClient = (provider, fromPrivateKey) => {
    const client = new web3_1.default(provider || `${constants_1.TATUM_API_URL}/v3/bsc/web3/${process.env.TATUM_API_KEY}`);
    if (fromPrivateKey) {
        client.eth.accounts.wallet.clear();
        client.eth.accounts.wallet.add(fromPrivateKey);
        client.eth.defaultAccount = client.eth.accounts.wallet[0].address;
    }
    return client;
};
/**
 * Sign BSC pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param provider url of the BSC Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.signBscKMSTransaction = async (tx, fromPrivateKey, provider) => {
    if (tx.chain !== model_1.Currency.BSC) {
        throw Error('Unsupported chain.');
    }
    const client = exports.getBscClient(provider, fromPrivateKey);
    const transactionConfig = JSON.parse(tx.serializedTransaction);
    transactionConfig.gas = await client.eth.estimateGas(transactionConfig);
    if (!transactionConfig.nonce) {
        transactionConfig.nonce = await blockchain_1.bscGetTransactionsCount(client.eth.defaultAccount);
    }
    return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc Store data transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscStoreDataTransaction = async (body, provider) => {
    await tatum_1.validateBody(body, model_1.CreateRecord);
    const { fromPrivateKey, to, ethFee, data, nonce, signatureId } = body;
    const client = exports.getBscClient(provider, fromPrivateKey);
    const address = to || client.eth.defaultAccount;
    if (!address) {
        throw new Error('Recipient must be provided.');
    }
    const addressNonce = nonce ? nonce : await blockchain_1.bscGetTransactionsCount(address);
    const customFee = ethFee ? ethFee : {
        gasLimit: `${data.length * 68 + 21000}`,
        gasPrice: client.utils.fromWei(await exports.bscGetGasPriceInWei(), 'gwei'),
    };
    const tx = {
        from: 0,
        to: address.trim(),
        value: '0',
        gasPrice: customFee.gasPrice,
        gas: customFee.gasLimit,
        data: data ? (client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data)) : undefined,
        nonce: addressNonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc or supported BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscOrBep20SignedTransaction = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.TransferBscBep20);
    const { fromPrivateKey, to, amount, currency, fee, data, nonce, signatureId } = body;
    const client = exports.getBscClient(provider, fromPrivateKey);
    let tx;
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    if (currency === model_1.Currency.BSC) {
        tx = {
            from: 0,
            to: to.trim(),
            value: client.utils.toWei(`${amount}`, 'ether'),
            gasPrice,
            data: data ? (client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data)) : undefined,
            nonce,
        };
    }
    else {
        // @ts-ignore
        const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], constants_1.CONTRACT_ADDRESSES[currency]);
        const digits = new bignumber_js_1.BigNumber(10).pow(constants_1.CONTRACT_DECIMALS[currency]);
        tx = {
            from: 0,
            to: constants_1.CONTRACT_ADDRESSES[currency],
            data: contract.methods.transfer(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),
            gasPrice,
            nonce,
        };
    }
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc custom BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareCustomBep20SignedTransaction = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.TransferCustomErc20);
    const { fromPrivateKey, to, amount, contractAddress, digits, fee, nonce, signatureId } = body;
    const client = exports.getBscClient(provider, fromPrivateKey);
    let tx;
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    // @ts-ignore
    const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], contractAddress);
    const decimals = new bignumber_js_1.BigNumber(10).pow(digits);
    tx = {
        from: 0,
        to: contractAddress,
        data: contract.methods.transfer(to.trim(), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(decimals).toString(16)}`).encodeABI(),
        gasPrice,
        nonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc deploy BEP20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareDeployBep20SignedTransaction = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.DeployEthErc20);
    const { name, address, symbol, supply, digits, fromPrivateKey, nonce, fee, signatureId, } = body;
    const client = exports.getBscClient(provider, fromPrivateKey);
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    // @ts-ignore
    const contract = new client.eth.Contract(token_abi_1.default);
    const deploy = contract.deploy({
        data: token_bytecode_1.default,
        arguments: [
            name,
            symbol,
            address,
            digits,
            `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`,
            `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`,
        ],
    });
    const tx = {
        from: 0,
        data: deploy.encodeABI(),
        gasPrice,
        nonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc invoke smart contract transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscSmartContractWriteMethodInvocation = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.SmartContractMethodInvocation);
    const { fromPrivateKey, fee, params, methodName, methodABI, contractAddress, nonce, signatureId, } = body;
    const client = exports.getBscClient(provider, fromPrivateKey);
    const contract = new client.eth.Contract([methodABI]);
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    const tx = {
        from: 0,
        to: contractAddress.trim(),
        data: contract.methods[methodName](...params).encodeABI(),
        gasPrice,
        nonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc mint ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscMintBep721SignedTransaction = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.EthMintErc721);
    const { fromPrivateKey, to, tokenId, contractAddress, nonce, fee, url, signatureId } = body;
    const client = exports.getBscClient(provider, fromPrivateKey);
    // @ts-ignore
    const contract = new (client).eth.Contract(erc721_abi_1.default, contractAddress);
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    const tx = {
        from: 0,
        to: contractAddress.trim(),
        data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url).encodeABI(),
        gasPrice,
        nonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc mint multiple ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscMintMultipleBep721SignedTransaction = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);
    const { fromPrivateKey, to, tokenId, contractAddress, url, nonce, signatureId, fee } = body;
    const client = await exports.getBscClient(provider, fromPrivateKey);
    // @ts-ignore
    const contract = new (client).eth.Contract(erc721_abi_1.default, contractAddress);
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    const tx = {
        from: 0,
        to: contractAddress.trim(),
        data: contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url).encodeABI(),
        gasPrice,
        nonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc burn ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscBurnBep721SignedTransaction = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.EthBurnErc721);
    const { fromPrivateKey, tokenId, fee, contractAddress, nonce, signatureId } = body;
    const client = exports.getBscClient(provider, fromPrivateKey);
    // @ts-ignore
    const contract = new (client).eth.Contract(erc721_abi_1.default, contractAddress);
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    const tx = {
        from: 0,
        to: contractAddress.trim(),
        data: contract.methods.burn(tokenId).encodeABI(),
        gasPrice,
        nonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc transfer ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscTransferBep721SignedTransaction = async (body, provider) => {
    var _a;
    await tatum_1.validateBody(body, model_1.EthTransferErc721);
    const { fromPrivateKey, to, tokenId, fee, contractAddress, nonce, signatureId, } = body;
    const client = await exports.getBscClient(provider, fromPrivateKey);
    // @ts-ignore
    const contract = new (client).eth.Contract(erc721_abi_1.default, contractAddress);
    const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei();
    const tx = {
        from: 0,
        to: contractAddress.trim(),
        data: contract.methods.safeTransfer(to.trim(), tokenId).encodeABI(),
        gasPrice,
        nonce,
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Sign Bsc deploy ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareBscDeployBep721SignedTransaction = async (body, provider) => {
    await tatum_1.validateBody(body, model_1.EthDeployErc721);
    const { fromPrivateKey, fee, name, symbol, nonce, signatureId, } = body;
    const client = await exports.getBscClient(provider, fromPrivateKey);
    // @ts-ignore
    const contract = new client.eth.Contract(erc721_abi_1.default, null, {
        data: erc721_bytecode_1.default,
    });
    // @ts-ignore
    const deploy = contract.deploy({
        arguments: [name, symbol]
    });
    const tx = {
        from: 0,
        data: deploy.encodeABI(),
        gasPrice: fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.bscGetGasPriceInWei(),
        nonce,
        gas: fee ? fee.gasLimit : 4500000
    };
    if (signatureId) {
        return JSON.stringify(tx);
    }
    return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;
};
/**
 * Send Bsc invoke smart contract transaction to the blockchain.
 * Invoked method only reads from blockchain the data and returns them back.
 *
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 */
exports.sendBscSmartContractReadMethodInvocationTransaction = async (body, provider) => {
    await tatum_1.validateBody(body, model_1.SmartContractMethodInvocation);
    const { params, methodName, methodABI, contractAddress, } = body;
    const client = exports.getBscClient(provider);
    const contract = new client.eth.Contract([methodABI], contractAddress);
    return { data: await contract.methods[methodName](...params).call() };
};
/**
 * Send Bsc store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendBscStoreDataTransaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscStoreDataTransaction(body, provider), body.signatureId);
/**
 * Send Bsc or supported BEP20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendBscOrBep20Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscOrBep20SignedTransaction(body, provider), body.signatureId);
/**
 * Send Bsc custom BEP20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendCustomBep20Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareCustomBep20SignedTransaction(body, provider), body.signatureId);
/**
 * Send Bsc deploy BEP20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendDeployBep20Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareDeployBep20SignedTransaction(body, provider), body.signatureId);
/**
 * Send Bsc invoke smart contract transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendBscSmartContractMethodInvocationTransaction = async (body, provider) => {
    if (body.methodABI.stateMutability === 'view') {
        return exports.sendBscSmartContractReadMethodInvocationTransaction(body, provider);
    }
    return blockchain_1.bscBroadcast(await exports.prepareBscSmartContractWriteMethodInvocation(body, provider), body.signatureId);
};
/**
 * Send Bsc BEP721 mint transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendMintBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintBep721SignedTransaction(body, provider), body.signatureId);
/**
 * Send Bsc BEP721 mint multiple transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendMintMultipleBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscMintMultipleBep721SignedTransaction(body, provider), body.signatureId);
/**
 * Send Bsc BEP721 burn transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendBurnBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscBurnBep721SignedTransaction(body, provider), body.signatureId);
/**
 * Send Bsc BEP721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscTransferBep721SignedTransaction(body, provider), body.signatureId);
/**
 * Send Bsc BEP721 deploy to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendDeployBep721Transaction = async (body, provider) => blockchain_1.bscBroadcast(await exports.prepareBscDeployBep721SignedTransaction(body, provider), body.signatureId);
//# sourceMappingURL=data:application/json;base64,