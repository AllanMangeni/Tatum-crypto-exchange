"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendCeloDeployErc721Transaction = exports.sendCeloTransferErc721Transaction = exports.sendCeloBurnErc721Transaction = exports.sendCeloMintMultipleErc721Transaction = exports.sendCeloMinErc721Transaction = exports.sendCeloOrcUsdTransaction = exports.prepareCeloOrCUsdSignedTransaction = exports.prepareCeloMintMultipleErc721SignedTransaction = exports.prepareCeloBurnErc20SignedTransaction = exports.prepareCeloTransferErc20SignedTransaction = exports.prepareCeloMintErc20SignedTransaction = exports.prepareCeloDeployErc20SignedTransaction = exports.prepareCeloBurnErc721SignedTransaction = exports.prepareCeloTransferErc721SignedTransaction = exports.prepareCeloMintErc721SignedTransaction = exports.prepareCeloDeployErc721SignedTransaction = exports.signCeloKMSTransaction = void 0;
const celo_ethers_wrapper_1 = require("@celo-tools/celo-ethers-wrapper");
const bignumber_js_1 = require("bignumber.js");
const web3_1 = __importDefault(require("web3"));
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const constants_1 = require("../constants");
const token_abi_1 = __importDefault(require("../contracts/erc20/token_abi"));
const token_bytecode_1 = __importDefault(require("../contracts/erc20/token_bytecode"));
const erc721_abi_1 = __importDefault(require("../contracts/erc721/erc721_abi"));
const erc721_bytecode_1 = __importDefault(require("../contracts/erc721/erc721_bytecode"));
const model_1 = require("../model");
const obtainWalletInformation = async (wallet, feeCurrencyContractAddress) => {
    const [txCount, gasPrice, from] = await Promise.all([
        wallet.getTransactionCount(),
        wallet.getGasPrice(feeCurrencyContractAddress),
        wallet.getAddress(),
    ]);
    return { txCount, gasPrice, from };
};
/**
 * Sign Celo pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.signCeloKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {
    if (tx.chain !== model_1.Currency.CELO) {
        throw Error('Unsupported chain.');
    }
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    await p.ready;
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const transaction = JSON.parse(tx.serializedTransaction);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, transaction.feeCurrencyContractAddress);
    transaction.nonce = transaction.nonce || txCount;
    transaction.gasPrice = gasPrice;
    transaction.from = from;
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(100000).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloDeployErc721SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.CeloDeployErc721);
    const { fromPrivateKey, name, symbol, feeCurrency, nonce, signatureId, } = body;
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default()).eth.Contract(erc721_abi_1.default);
    const deploy = contract.deploy({
        data: erc721_bytecode_1.default,
        arguments: [name, symbol]
    });
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            gasLimit: '0',
            data: deploy.encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        gasPrice,
        data: deploy.encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloMintErc721SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.CeloMintErc721);
    const { fromPrivateKey, url, to, tokenId, contractAddress, feeCurrency, nonce, signatureId, } = body;
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default()).eth.Contract(erc721_abi_1.default, contractAddress.trim());
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            to: contractAddress.trim(),
            gasLimit: '0',
            data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url).encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        to: contractAddress.trim(),
        gasPrice,
        data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url).encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloTransferErc721SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.CeloTransferErc721);
    const { fromPrivateKey, to, tokenId, contractAddress, feeCurrency, nonce, signatureId, } = body;
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default()).eth.Contract(erc721_abi_1.default, contractAddress.trim());
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            gasLimit: '0',
            nonce,
            to: contractAddress.trim(),
            data: contract.methods.safeTransfer(to.trim(), tokenId).encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        to: contractAddress.trim(),
        gasPrice,
        data: contract.methods.safeTransfer(to.trim(), tokenId).encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloBurnErc721SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.CeloBurnErc721);
    const { fromPrivateKey, tokenId, contractAddress, feeCurrency, nonce, signatureId, } = body;
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default()).eth.Contract(erc721_abi_1.default, contractAddress.trim());
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            gasLimit: '0',
            to: contractAddress.trim(),
            data: contract.methods.burn(tokenId).encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        to: contractAddress.trim(),
        gasPrice,
        data: contract.methods.burn(tokenId).encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloDeployErc20SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.DeployCeloErc20);
    const { fromPrivateKey, name, symbol, supply, address, digits, feeCurrency, nonce, signatureId, } = body;
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default()).eth.Contract(token_abi_1.default);
    const deploy = contract.deploy({
        data: token_bytecode_1.default,
        arguments: [
            name,
            symbol,
            address,
            digits,
            `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`,
            `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`,
        ],
    });
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            gasLimit: '0',
            data: deploy.encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        gasPrice,
        data: deploy.encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloMintErc20SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.MintCeloErc20);
    const { fromPrivateKey, amount, to, contractAddress, feeCurrency, nonce, signatureId, } = body;
    const url = provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`;
    const p = new celo_ethers_wrapper_1.CeloProvider(url);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default(url)).eth.Contract(token_abi_1.default, contractAddress.trim());
    const decimals = await contract.methods.decimals().call();
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            gasLimit: '0',
            to: contractAddress.trim(),
            data: contract.methods.mint(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        to: contractAddress.trim(),
        gasPrice,
        data: contract.methods.mint(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloTransferErc20SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.TransferCeloOrCeloErc20Token);
    const { fromPrivateKey, to, amount, contractAddress, feeCurrency, nonce, signatureId, } = body;
    const url = provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`;
    const p = new celo_ethers_wrapper_1.CeloProvider(url);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default(url)).eth.Contract(token_abi_1.default, contractAddress.trim());
    const decimals = await contract.methods.decimals().call();
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            gasLimit: '0',
            to: contractAddress.trim(),
            data: contract.methods.transfer(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        to: contractAddress.trim(),
        gasPrice,
        data: contract.methods.transfer(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloBurnErc20SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.BurnCeloErc20);
    const { fromPrivateKey, amount, contractAddress, feeCurrency, nonce, signatureId, } = body;
    const url = provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`;
    const p = new celo_ethers_wrapper_1.CeloProvider(url);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default(url)).eth.Contract(token_abi_1.default, contractAddress.trim());
    const decimals = await contract.methods.decimals().call();
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            gasLimit: '0',
            to: contractAddress.trim(),
            data: contract.methods.burn('0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        to: contractAddress.trim(),
        gasPrice,
        data: contract.methods.burn('0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
exports.prepareCeloMintMultipleErc721SignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.CeloMintMultipleErc721);
    const { fromPrivateKey, to, tokenId, contractAddress, url, feeCurrency, nonce, signatureId, } = body;
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    const network = await p.ready;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : (testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET);
    // @ts-ignore
    const contract = new (new web3_1.default()).eth.Contract(erc721_abi_1.default, contractAddress.trim());
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            gasLimit: '0',
            to: contractAddress.trim(),
            data: contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url).encodeABI(),
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        gasLimit: '0',
        to: contractAddress.trim(),
        gasPrice,
        data: contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url).encodeABI(),
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
/**
 * Sign Celo or cUsd transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareCeloOrCUsdSignedTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.TransferCeloOrCeloErc20Token);
    const { fromPrivateKey, to, feeCurrency, nonce, data, amount, currency, signatureId, } = body;
    const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);
    const network = await p.ready;
    const cUsdAddress = testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET;
    const feeCurrencyContractAddress = (feeCurrency === model_1.Currency.CELO) ? undefined : cUsdAddress;
    let value;
    if (currency === model_1.Currency.CELO) {
        value = `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(1e18).toString(16)}`;
    }
    else {
        value = `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(1e18).toString(16)}`;
    }
    // @ts-ignore
    const contract = new (new web3_1.default()).eth.Contract([constants_1.TRANSFER_METHOD_ABI], cUsdAddress.trim());
    if (signatureId) {
        return JSON.stringify({
            chainId: network.chainId,
            feeCurrency: feeCurrencyContractAddress,
            nonce,
            to: currency === model_1.Currency.CELO ? to.trim() : cUsdAddress,
            data: currency === model_1.Currency.CELO ? data : contract.methods.transfer(to.trim(), value).encodeABI(),
            gasLimit: '0',
            value: currency === model_1.Currency.CELO ? value : undefined,
        });
    }
    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);
    const { txCount, gasPrice, from } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);
    const transaction = {
        chainId: network.chainId,
        feeCurrency: feeCurrencyContractAddress,
        nonce: nonce || txCount,
        to: currency === model_1.Currency.CELO ? to.trim() : cUsdAddress,
        data: currency === model_1.Currency.CELO ? data : contract.methods.transfer(to.trim(), value).encodeABI(),
        gasLimit: '0',
        gasPrice,
        value: currency === model_1.Currency.CELO ? value : undefined,
        from,
    };
    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CUSD ? 100000 : 0).toHexString();
    return wallet.signTransaction(transaction);
};
/**
 * Send Celo or cUsd transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendCeloOrcUsdTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloOrCUsdSignedTransaction(testnet, body, provider));
exports.sendCeloMinErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintErc721SignedTransaction(testnet, body, provider));
exports.sendCeloMintMultipleErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintMultipleErc721SignedTransaction(testnet, body, provider));
exports.sendCeloBurnErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloBurnErc721SignedTransaction(testnet, body, provider));
exports.sendCeloTransferErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloTransferErc721SignedTransaction(testnet, body, provider));
exports.sendCeloDeployErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloDeployErc721SignedTransaction(testnet, body, provider));
//# sourceMappingURL=data:application/json;base64,