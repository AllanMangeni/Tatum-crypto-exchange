"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferHexToBase58Address = exports.signTrxKMSTransaction = exports.prepareTronCreateTrc20SignedKMSTransaction = exports.prepareTronCreateTrc10SignedKMSTransaction = exports.prepareTronTrc20SignedKMSTransaction = exports.prepareTronTrc10SignedKMSTransaction = exports.prepareTronFreezeKMSTransaction = exports.prepareTronSignedKMSTransaction = exports.prepareTronCreateTrc20SignedTransaction = exports.prepareTronCreateTrc10SignedTransaction = exports.prepareTronTrc20SignedTransaction = exports.prepareTronTrc10SignedTransaction = exports.prepareTronFreezeTransaction = exports.prepareTronSignedTransaction = exports.signTronKMSTransaction = exports.createTronTrc20Transaction = exports.createTronTrc10Transaction = exports.sendTronTrc20Transaction = exports.sendTronTrc10Transaction = exports.freezeTronTransaction = exports.sendTronTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const token_abi_1 = __importDefault(require("../contracts/trc20/token_abi"));
const token_bytecode_1 = __importDefault(require("../contracts/trc20/token_bytecode"));
const model_1 = require("../model");
// tslint:disable-next-line:no-var-requires
const TronWeb = require('tronweb');
const prepareTronWeb = (testnet) => {
    const HttpProvider = TronWeb.providers.HttpProvider;
    const url = testnet ? 'https://api.shasta.trongrid.io' : 'https://api.trongrid.io';
    const fullNode = new HttpProvider(url);
    const solidityNode = new HttpProvider(url);
    const eventServer = new HttpProvider(url);
    return new TronWeb(fullNode, solidityNode, eventServer);
};
/**
 * Send Tron transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendTronTransaction = async (testnet, body) => {
    return blockchain_1.tronBroadcast(await exports.prepareTronSignedTransaction(testnet, body));
};
/**
 * Send Tron Freeze balance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
exports.freezeTronTransaction = async (testnet, body) => {
    return blockchain_1.tronBroadcast(await exports.prepareTronFreezeTransaction(testnet, body));
};
/**
 * Send Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendTronTrc10Transaction = async (testnet, body) => {
    return blockchain_1.tronBroadcast(await exports.prepareTronTrc10SignedTransaction(testnet, body));
};
/**
 * Send Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
exports.sendTronTrc20Transaction = async (testnet, body) => {
    return blockchain_1.tronBroadcast(await exports.prepareTronTrc20SignedTransaction(testnet, body));
};
/**
 * Create Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
exports.createTronTrc10Transaction = async (testnet, body) => {
    return blockchain_1.tronBroadcast(await exports.prepareTronCreateTrc10SignedTransaction(testnet, body));
};
/**
 * Create Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
exports.createTronTrc20Transaction = async (testnet, body) => {
    return blockchain_1.tronBroadcast(await exports.prepareTronCreateTrc20SignedTransaction(testnet, body));
};
/**
 * Sign Tron pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
exports.signTronKMSTransaction = async (tx, fromPrivateKey, testnet) => {
    if (tx.chain !== model_1.Currency.TRON) {
        throw Error('Unsupported chain.');
    }
    const tronWeb = prepareTronWeb(testnet);
    const transactionConfig = JSON.parse(tx.serializedTransaction);
    return JSON.stringify(await tronWeb.trx.sign(transactionConfig, fromPrivateKey));
};
/**
 * Sign Tron transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronSignedTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.TransferTron);
    const { fromPrivateKey, to, amount, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.sendTrx(to, tronWeb.toSun(amount), tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)));
    return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));
};
/**
 * Sign Tron Freeze balance transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronFreezeTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.FreezeTron);
    const { fromPrivateKey, receiver, amount, resource, duration, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.freezeBalance(tronWeb.toSun(parseFloat(amount)), duration, resource, tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)), receiver);
    return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));
};
/**
 * Sign Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param precision
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronTrc10SignedTransaction = async (testnet, body, precision) => {
    await tatum_1.validateBody(body, model_1.TransferTronTrc10);
    const { fromPrivateKey, to, tokenId, amount, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.sendToken(to, new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(precision || await getTrc10Precision(tronWeb, tokenId))), tokenId, tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)));
    return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));
};
/**
 * Sign Tron TRC20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronTrc20SignedTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.TransferTronTrc20);
    const { fromPrivateKey, to, tokenAddress, amount, feeLimit, } = body;
    const tronWeb = prepareTronWeb(testnet);
    tronWeb.setAddress(tokenAddress);
    const contractInstance = await tronWeb.contract().at(tokenAddress);
    const decimals = await contractInstance.decimals().call();
    const { transaction } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(tokenAddress), 'transfer(address,uint256)', {
        feeLimit: tronWeb.toSun(feeLimit),
        from: tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey))
    }, [{ type: 'address', value: tronWeb.address.toHex(to) }, {
            type: 'uint256',
            value: `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`
        }], tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)));
    return JSON.stringify(await tronWeb.trx.sign(transaction, fromPrivateKey));
};
/**
 * Sign create Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronCreateTrc10SignedTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.CreateTronTrc10);
    const { fromPrivateKey, name, abbreviation, description, url, totalSupply, decimals, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.createToken({
        name,
        abbreviation,
        description,
        url,
        totalSupply: new bignumber_js_1.default(totalSupply).multipliedBy(new bignumber_js_1.default(10).pow(decimals)),
        trxRatio: 1,
        tokenRatio: 1,
        saleStart: Date.now() + 60000,
        saleEnd: Date.now() + 100000,
        freeBandwidth: 0,
        freeBandwidthLimit: 0,
        frozenAmount: 0,
        frozenDuration: 0,
        precision: decimals,
    }, tronWeb.address.fromPrivateKey(fromPrivateKey));
    return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));
};
/**
 * Sign create Tron TRC20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronCreateTrc20SignedTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.CreateTronTrc20);
    const { fromPrivateKey, name, decimals, recipient, symbol, totalSupply, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.createSmartContract({
        feeLimit: 1000000000,
        callValue: 0,
        userFeePercentage: 100,
        originEnergyLimit: 1,
        abi: JSON.stringify(token_abi_1.default),
        bytecode: token_bytecode_1.default,
        parameters: [
            name,
            symbol,
            decimals,
            tronWeb.address.toHex(recipient),
            totalSupply,
        ],
        name,
    }, tronWeb.address.fromPrivateKey(fromPrivateKey));
    return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));
};
/**
 * Prepare Tron transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronSignedKMSTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.TransferTron);
    const { from, to, amount, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.sendTrx(to, tronWeb.toSun(amount), from);
    return JSON.stringify(tx);
};
/**
 * Prepare Tron Freeze balance transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronFreezeKMSTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.FreezeTron);
    const { from, receiver, amount, resource, duration, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.freezeBalance(tronWeb.toSun(parseFloat(amount)), duration, resource, from, receiver);
    return JSON.stringify(tx);
};
/**
 * Prepare Tron TRC10 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param precision
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronTrc10SignedKMSTransaction = async (testnet, body, precision) => {
    await tatum_1.validateBody(body, model_1.TransferTronTrc10);
    const { from, to, tokenId, amount, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.sendToken(to, new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(precision || await getTrc10Precision(tronWeb, tokenId))), tokenId, from);
    return JSON.stringify(tx);
};
/**
 * Prepare Tron TRC20 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronTrc20SignedKMSTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.TransferTronTrc20);
    const { from, to, tokenAddress, amount, feeLimit, } = body;
    const tronWeb = prepareTronWeb(testnet);
    tronWeb.setAddress(tokenAddress);
    const contractInstance = await tronWeb.contract().at(tokenAddress);
    const decimals = await contractInstance.decimals().call();
    const { transaction } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(tokenAddress), 'transfer(address,uint256)', {
        feeLimit: tronWeb.toSun(feeLimit),
        from
    }, [{ type: 'address', value: tronWeb.address.toHex(to) }, {
            type: 'uint256',
            value: `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`
        }], from);
    return JSON.stringify(transaction);
};
/**
 * Prepare create Tron TRC10 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronCreateTrc10SignedKMSTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.CreateTronTrc10);
    const { from, name, abbreviation, description, url, totalSupply, decimals, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.createToken({
        name,
        abbreviation,
        description,
        url,
        totalSupply: new bignumber_js_1.default(totalSupply).multipliedBy(new bignumber_js_1.default(10).pow(decimals)),
        trxRatio: 1,
        tokenRatio: 1,
        saleStart: Date.now() + 60000,
        saleEnd: Date.now() + 100000,
        freeBandwidth: 0,
        freeBandwidthLimit: 0,
        frozenAmount: 0,
        frozenDuration: 0,
        precision: decimals,
    }, from);
    return JSON.stringify(tx);
};
/**
 * Prepare create Tron TRC20 transaction for KMS. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
exports.prepareTronCreateTrc20SignedKMSTransaction = async (testnet, body) => {
    await tatum_1.validateBody(body, model_1.CreateTronTrc20);
    const { from, name, decimals, recipient, symbol, totalSupply, } = body;
    const tronWeb = prepareTronWeb(testnet);
    const tx = await tronWeb.transactionBuilder.createSmartContract({
        feeLimit: 1000000000,
        callValue: 0,
        userFeePercentage: 100,
        originEnergyLimit: 1,
        abi: JSON.stringify(token_abi_1.default),
        bytecode: token_bytecode_1.default,
        parameters: [
            name,
            symbol,
            decimals,
            tronWeb.address.toHex(recipient),
            totalSupply,
        ],
        name,
    }, from);
    return JSON.stringify(tx);
};
/**
 * Sign Tron pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
exports.signTrxKMSTransaction = async (tx, fromPrivateKey, testnet) => {
    if (tx.chain !== model_1.Currency.TRON) {
        throw Error('Unsupported chain.');
    }
    const transactionConfig = JSON.parse(tx.serializedTransaction);
    const tronWeb = prepareTronWeb(testnet);
    return JSON.stringify(await tronWeb.trx.sign(transactionConfig, fromPrivateKey));
};
exports.transferHexToBase58Address = (address) => prepareTronWeb(true).address.fromHex(address);
const getTrc10Precision = async (tronWeb, tokenId) => {
    const { data } = (await tronWeb.fullNode.request(`/v1/assets/${tokenId}`));
    if (!(data === null || data === void 0 ? void 0 : data.length)) {
        throw new Error('No such asset.');
    }
    return data[0].precision;
};
//# sourceMappingURL=data:application/json;base64,