import { BurnCeloErc20, CeloBurnErc721, CeloDeployErc721, CeloMintErc721, CeloMintMultipleErc721, CeloTransferErc721, DeployCeloErc20, MintCeloErc20, TransactionKMS, TransferCeloOrCeloErc20Token } from '../model';
/**
 * Sign Celo pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const signCeloKMSTransaction: (tx: TransactionKMS, fromPrivateKey: string, testnet: boolean, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloDeployErc721SignedTransaction: (testnet: boolean, body: CeloDeployErc721, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloMintErc721SignedTransaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloTransferErc721SignedTransaction: (testnet: boolean, body: CeloTransferErc721, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloBurnErc721SignedTransaction: (testnet: boolean, body: CeloBurnErc721, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloDeployErc20SignedTransaction: (testnet: boolean, body: DeployCeloErc20, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloMintErc20SignedTransaction: (testnet: boolean, body: MintCeloErc20, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloTransferErc20SignedTransaction: (testnet: boolean, body: TransferCeloOrCeloErc20Token, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloBurnErc20SignedTransaction: (testnet: boolean, body: BurnCeloErc20, provider?: string | undefined) => Promise<string>;
export declare const prepareCeloMintMultipleErc721SignedTransaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Celo or cUsd transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareCeloOrCUsdSignedTransaction: (testnet: boolean, body: TransferCeloOrCeloErc20Token, provider?: string | undefined) => Promise<string>;
/**
 * Send Celo or cUsd transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloOrcUsdTransaction: (testnet: boolean, body: TransferCeloOrCeloErc20Token, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const sendCeloMinErc721Transaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const sendCeloMintMultipleErc721Transaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const sendCeloBurnErc721Transaction: (testnet: boolean, body: CeloBurnErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const sendCeloTransferErc721Transaction: (testnet: boolean, body: CeloTransferErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const sendCeloDeployErc721Transaction: (testnet: boolean, body: CeloDeployErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
