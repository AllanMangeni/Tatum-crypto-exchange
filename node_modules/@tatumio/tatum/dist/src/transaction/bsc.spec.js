"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_1 = __importDefault(require("web3"));
const model_1 = require("../model");
const bsc_1 = require("./bsc");
describe('BSC transactions', () => {
    jest.setTimeout(19999);
    const broadcast = async (txData) => {
        const client = new web3_1.default('https://data-seed-prebsc-2-s1.binance.org:8545');
        const result = await new Promise((async (resolve, reject) => {
            client.eth.sendSignedTransaction(txData)
                .once('transactionHash', txId => resolve({ txId }))
                .on('error', e => reject(new Error(`Unable to broadcast transaction due to ${e.message}.`)));
        }));
        return result;
    };
    it('should test valid transaction BSC data', async () => {
        const body = new model_1.TransferBscBep20();
        body.fromPrivateKey = '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29';
        body.amount = '0';
        body.currency = model_1.Currency.BSC;
        body.to = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        const txData = await bsc_1.prepareBscOrBep20SignedTransaction(body);
        expect(txData).toContain('0x');
        console.log(await broadcast(txData));
    });
    it('should test valid transaction ERC20 data', async () => {
        const body = new model_1.TransferBscBep20();
        body.fromPrivateKey = '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29';
        body.amount = '0';
        body.currency = model_1.Currency.BADA;
        body.to = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        const txData = await bsc_1.prepareBscOrBep20SignedTransaction(body);
        expect(txData).toContain('0x');
        console.log(await broadcast(txData));
    });
    it('should test valid custom transaction ERC20 data', async () => {
        const body = new model_1.TransferCustomErc20();
        body.fromPrivateKey = '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29';
        body.amount = '0';
        body.contractAddress = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        body.to = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        body.digits = 10;
        const txData = await bsc_1.prepareCustomBep20SignedTransaction(body);
        expect(txData).toContain('0x');
        console.log(await broadcast(txData));
    });
    it('should test valid custom deployment ERC20', async () => {
        const body = new model_1.DeployEthErc20();
        body.fromPrivateKey = '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29';
        body.symbol = 'SYMBOL';
        body.name = 'Test_ERC20';
        body.supply = '100';
        body.address = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        body.digits = 10;
        const txData = await bsc_1.prepareDeployBep20SignedTransaction(body);
        expect(txData).toContain('0x');
        console.log(await broadcast(txData));
    });
    it('should test invalid custom deployment ERC20, missing supply', async () => {
        const body = new model_1.DeployEthErc20();
        body.fromPrivateKey = '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29';
        body.symbol = 'SYMBOL';
        body.name = 'Test_ERC20';
        body.address = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        body.digits = 10;
        try {
            await bsc_1.prepareDeployBep20SignedTransaction(body);
            fail('Validation did not pass.');
        }
        catch (e) {
            console.error(e);
        }
    });
    it('should test invalid custom transaction ERC20 data, missing digits', async () => {
        const body = new model_1.TransferCustomErc20();
        body.fromPrivateKey = '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29';
        body.amount = '0';
        body.contractAddress = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        body.to = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        try {
            await bsc_1.prepareCustomBep20SignedTransaction(body);
            fail('Validation did not pass.');
        }
        catch (e) {
            console.error(e);
        }
    });
    it('should not test valid transaction data, missing currency', async () => {
        const body = new model_1.TransferBscBep20();
        body.fromPrivateKey = '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29';
        body.amount = '0';
        body.to = '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
        try {
            await bsc_1.prepareBscOrBep20SignedTransaction(body);
            fail('Validation did not pass.');
        }
        catch (e) {
            console.error(e);
        }
    });
    it('should test ethGetGasPriceInWei', async () => {
        const gasPrice = await bsc_1.bscGetGasPriceInWei();
        expect(gasPrice).not.toBeNull();
    });
    it('should test read smart contract method invocation', async () => {
        const result = await bsc_1.sendBscSmartContractReadMethodInvocationTransaction({
            fromPrivateKey: '0x192afdb39073e202f200117b609e8d40c1c8f50c3baebe1bda4773db48df81a0',
            contractAddress: '0x595bad1621784e9b0161d909be0117f17a5d37ca',
            methodName: 'balanceOf',
            methodABI: {
                constant: true,
                inputs: [
                    {
                        name: 'owner',
                        type: 'address',
                    },
                ],
                name: 'balanceOf',
                outputs: [
                    {
                        name: '',
                        type: 'uint256',
                    },
                ],
                payable: false,
                stateMutability: 'view',
                type: 'function',
            },
            params: ['0x8c76887d2e738371bd750362fb55887343472346'],
        });
        console.log(result);
        expect(result).not.toBeNull();
    });
    it('should test write smart contract method invocation', async () => {
        const result = await bsc_1.sendBscSmartContractMethodInvocationTransaction({
            fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
            contractAddress: '0xd7d3e5e2174b530fdfb6d680c07c8b34495e2195',
            fee: { gasLimit: '40000', gasPrice: '200' },
            methodName: 'transferFrom',
            methodABI: {
                constant: false,
                inputs: [
                    {
                        name: 'from',
                        type: 'address',
                    },
                    {
                        name: 'to',
                        type: 'address',
                    },
                    {
                        name: 'value',
                        type: 'uint256',
                    },
                ],
                name: 'transferFrom',
                outputs: [
                    {
                        name: '',
                        type: 'bool',
                    },
                ],
                payable: false,
                stateMutability: 'nonpayable',
                type: 'function',
            },
            params: ['0x811dfbff13adfbc3cf653dcc373c03616d3471c9', '0x8c76887d2e738371bd750362fb55887343472346', '1'],
        });
        expect(result).not.toBeNull();
    });
    it('should test bep 721 mint transaction', async () => {
        try {
            const tokenId = new Date().getTime().toString();
            const mintedToken = await bsc_1.sendMintBep721Transaction({
                to: '0x811dfbff13adfbc3cf653dcc373c03616d3471c9',
                tokenId,
                url: 'https://www.seznam.cz',
                fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
                chain: model_1.Currency.BSC,
                contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                fee: {
                    gasLimit: '50000',
                    gasPrice: '110'
                }
            });
            console.log(tokenId);
            expect(mintedToken).not.toBeNull();
        }
        catch (e) {
            console.log(e);
        }
    });
    it('should test bep 721 mint multiple transaction', async () => {
        const firstTokenId = new Date().getTime();
        const secondTokenId = firstTokenId + 1;
        const mintedTokens = await bsc_1.sendMintMultipleBep721Transaction({
            to: ['0x811dfbff13adfbc3cf653dcc373c03616d3471c9', '0x811dfbff13adfbc3cf653dcc373c03616d3471c9'],
            tokenId: [firstTokenId.toString(), secondTokenId.toString()],
            url: ['https://www.seznam.cz', 'https://www.seznam.cz'],
            fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
            chain: model_1.Currency.BSC,
            contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
            fee: {
                gasLimit: '50000',
                gasPrice: '100'
            }
        });
        expect(mintedTokens).not.toBeNull();
    });
    it('should test bep 721 burn transaction', async () => {
        const burnBep721Token = await bsc_1.sendBurnBep721Transaction({
            tokenId: '1615552558810',
            fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
            chain: model_1.Currency.BSC,
            contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
            fee: {
                gasLimit: '5000000',
                gasPrice: '110'
            },
        });
        expect(burnBep721Token).not.toBeNull();
    });
    it('should test bep 721 send transaction', async () => {
        const sendBep721Token = await bsc_1.sendBep721Transaction({
            to: '0x811dfbff13adfbc3cf653dcc373c03616d3471c9',
            tokenId: '1615546122766',
            fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
            chain: model_1.Currency.BSC,
            contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
            fee: {
                gasLimit: '5000000',
                gasPrice: '100'
            },
        });
        expect(sendBep721Token).not.toBeNull();
    });
    it('should test bep 721 deploy transaction', async () => {
        const deployBep721Token = await bsc_1.sendDeployBep721Transaction({
            symbol: '1oido3id3',
            fromPrivateKey: '0x1a4344e55c562db08700dd32e52e62e7c40b1ef5e27c6ddd969de9891a899b29',
            chain: model_1.Currency.BSC,
            name: '2123kd',
        });
        expect(deployBep721Token).not.toBeNull();
    });
});
//# sourceMappingURL=data:application/json;base64,